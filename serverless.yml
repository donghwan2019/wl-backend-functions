service: wl-backend-functions 
frameworkVersion: '3'

useDotenv: true

plugins:
  - serverless-webpack

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs20.x
  architecture: arm64
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-2
  memorySize: 256
  timeout: 29
  httpApi:
    cors: true
  logs:
    httpApi:
      format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'

package:
  individually: true

functions:
  hello:
    handler: handler.hello
    events:
      - httpApi:
          path: /${self:provider.stage}
          method: get

  asosmin:
    handler: kma-scraper/handler.asosminweather
    events:
      - httpApi:
          path: /${self:provider.stage}/asosmin/{datetime}
          method: get
    environment:
      DATA_GO_KR_SERVICE_KEY: ${env:DATA_GO_KR_SERVICE_KEY}

  msrstnlist:
    handler: keco/handler.msrstnList
    events:
      - httpApi:
          path: /${self:provider.stage}/msrstnlist
          method: get
    environment:
      DATA_GO_KR_SERVICE_KEY: ${env:DATA_GO_KR_SERVICE_KEY}

  ctprvnrltmmesurednsty:
    handler: keco/handler.ctprvnrltmmesurednsty
    events:
      - httpApi:
          path: /${self:provider.stage}/ctprvnrltmmesurednsty/{datetime}
          method: get
    environment:
      DATA_GO_KR_SERVICE_KEY: ${env:DATA_GO_KR_SERVICE_KEY}

  minudustfrcstdspth:
    handler: keco/handler.minudustfrcstdspth
    events:
      - httpApi:
          path: /${self:provider.stage}/minudustfrcstdspth/{datetime}
          method: get
    environment:
      DATA_GO_KR_SERVICE_KEY: ${env:DATA_GO_KR_SERVICE_KEY}

  minudustweekfrcstdspth:
    handler: keco/handler.minudustweekfrcstdspth
    events:
      - httpApi:
          path: /${self:provider.stage}/minudustweekfrcstdspth/{datetime}
          method: get
    environment:
      DATA_GO_KR_SERVICE_KEY: ${env:DATA_GO_KR_SERVICE_KEY}

  vilagefcst:
    handler: kma/handler.vilagefcst
    events:
      - httpApi:
          path: /${self:provider.stage}/vilagefcst
          method: get
    environment:
      DATA_GO_KR_SERVICE_KEY: ${env:DATA_GO_KR_SERVICE_KEY}

  ultrasrtfcst:
    handler: kma/handler.ultrasrtfcst
    events:
      - httpApi:
          path: /${self:provider.stage}/ultrasrtfcst
          method: get
    environment:
      DATA_GO_KR_SERVICE_KEY: ${env:DATA_GO_KR_SERVICE_KEY}

  ultrasrtncst:
    handler: kma/handler.ultrasrtncst
    events:
      - httpApi:
          path: /${self:provider.stage}/ultrasrtncst
          method: get
    environment:
      DATA_GO_KR_SERVICE_KEY: ${env:DATA_GO_KR_SERVICE_KEY}

  midfcst:
    handler: kma/handler.midfcst
    events:
      - httpApi:
          path: /${self:provider.stage}/midfcst
          method: get
    environment:
      DATA_GO_KR_SERVICE_KEY: ${env:DATA_GO_KR_SERVICE_KEY}

  midlandfcst:
    handler: kma/handler.midlandfcst
    events:
      - httpApi:
          path: /${self:provider.stage}/midlandfcst
          method: get
    environment:
      DATA_GO_KR_SERVICE_KEY: ${env:DATA_GO_KR_SERVICE_KEY}
  
  midta:
    handler: kma/handler.midta
    events:
      - httpApi:
          path: /${self:provider.stage}/midta
          method: get
    environment:
      DATA_GO_KR_SERVICE_KEY: ${env:DATA_GO_KR_SERVICE_KEY}
  
  midseafcst:
    handler: kma/handler.midseafcst
    events:
      - httpApi:
          path: /${self:provider.stage}/midseafcst
          method: get
    environment:
      DATA_GO_KR_SERVICE_KEY: ${env:DATA_GO_KR_SERVICE_KEY}

  todayweather:
    handler: todayweather/handler.todayweather
    events:
      - httpApi:
          path: /${self:provider.stage}/todayweather
          method: get
    environment:
      DATA_GO_KR_SERVICE_KEY: ${env:DATA_GO_KR_SERVICE_KEY}

  geo:
    handler: geo/handler.getInfo
    events:
      - httpApi:
          path: /${self:provider.stage}/geo
          method: get
    environment:
      DAUM_API_KEY: ${env:DAUM_API_KEY}

resources:  
  Resources:  
    CloudFrontDistribution:  
      Type: AWS::CloudFront::Distribution  
      Properties:  
        DistributionConfig:  
          Comment: WL Backend Functions CloudFront Distribution  
          Origins:
            - Id: WLBackendFunctionsOrigin  
              DomainName:
                Fn::Join:
                  - ''
                  - - Ref: HttpApi
                    - '.execute-api.'
                    - '${self:provider.region}'
                    - '.amazonaws.com'
              OriginPath: '/${self:provider.stage}'
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
          Enabled: true  
          DefaultCacheBehavior:  
            TargetOriginId: WLBackendFunctionsOrigin
            AllowedMethods:
              - GET
              - HEAD
            ViewerProtocolPolicy: 'redirect-to-https' 
            DefaultTTL: 60
            ForwardedValues:  
              QueryString: false  
            Compress: true
